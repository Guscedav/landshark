<launch>

    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_leftwheel" args="0 0.28 0 0 0 0 base_link Lw" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_rightwheel" args="0 -0.28 0 0 0 0 base_link Rw" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_footprint" args="0 0 -0.153 0 0 0 base_link base_footprint" /> <!-- Z-translation equals wheel radius -->

    <!-- Landshark node -->
    <node 
		name="landshark_robot_node" 
		pkg="landshark" 
		type="landshark"
		respawn="true"  >
		<remap from="/robot/odom" to="/odom" />
		<remap from="/robot/cmd_vel" to="/cmd_vel" />
		<remap from="/robot/set_master_control" to="/set_master_control" />
	</node>

    <!-- Velodyne Lidar -->
    <!-- declare arguments with default values -->
    <arg name="calibration" default="$(find velodyne_pointcloud)/params/32db.yaml"/>
    <arg name="device_ip" default="" />
    <arg name="frame_id" default="velodyne" />
    <arg name="manager" default="$(arg frame_id)_nodelet_manager" />
    <arg name="max_range" default="130.0" />
    <arg name="min_range" default="0.4" />
    <arg name="pcap" default="" />
    <arg name="port" default="2368" />
    <arg name="read_fast" default="false" />
    <arg name="read_once" default="false" />
    <arg name="repeat_delay" default="0.0" />
    <arg name="rpm" default="600.0" />
    <arg name="gps_time" default="false" />
    <arg name="pcap_time" default="false" />
    <arg name="cut_angle" default="-0.01" />
    <arg name="timestamp_first_packet" default="false" />
    <arg name="laserscan_ring" default="22" />
    <arg name="laserscan_resolution" default="0.007" />
    <arg name="organize_cloud" default="false" />

    <!-- start nodelet manager and driver nodelets -->
    <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
        <arg name="device_ip" value="$(arg device_ip)"/>
        <arg name="frame_id" value="$(arg frame_id)"/>
        <arg name="manager" value="$(arg manager)" />
        <arg name="model" value="32E"/>
        <arg name="pcap" value="$(arg pcap)"/>
        <arg name="port" value="$(arg port)"/>
        <arg name="read_fast" value="$(arg read_fast)"/>
        <arg name="read_once" value="$(arg read_once)"/>
        <arg name="repeat_delay" value="$(arg repeat_delay)"/>
        <arg name="rpm" value="$(arg rpm)"/>
        <arg name="gps_time" value="$(arg gps_time)"/>
        <arg name="pcap_time" value="$(arg pcap_time)"/>
        <arg name="cut_angle" value="$(arg cut_angle)"/>
        <arg name="timestamp_first_packet" value="$(arg timestamp_first_packet)"/>
    </include>

    <!-- start transform nodelet -->
    <include file="$(find velodyne_pointcloud)/launch/transform_nodelet.launch">
        <arg name="model" value="32E"/>
        <arg name="calibration" value="$(arg calibration)"/>
        <arg name="manager" value="$(arg manager)" />
        <arg name="fixed_frame" value="" />
        <arg name="target_frame" value="" />
        <arg name="max_range" value="$(arg max_range)"/>
        <arg name="min_range" value="$(arg min_range)"/>
        <arg name="organize_cloud" value="$(arg organize_cloud)"/>
    </include>

    <!-- start laserscan nodelet -->
    <include file="$(find velodyne_pointcloud)/launch/laserscan_nodelet.launch">
        <arg name="manager" value="$(arg manager)" />
        <arg name="ring" value="$(arg laserscan_ring)"/>
        <arg name="resolution" value="$(arg laserscan_resolution)"/>
    </include>
    
    <!-- Cartographer -->
    <param name="robot_description"
    textfile="$(find cartographer_ros)/urdf/Landshark_2D.urdf" />

    <node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher" />
        -->
    	<node pkg="tf2_ros" type="static_transform_publisher" name="tf_Lidar" args="0 0 0.767 3.92699 0 0 base_link velodyne" /> <!-- z distance from wheel axis to lidar center and 225° offset -->

    <node name="cartographer_node" pkg="cartographer_ros"
      type="cartographer_node" args="
          -configuration_directory $(find cartographer_ros)/configuration_files
          -configuration_basename Landshark_2D.lua"
      output="screen">
        <remap from="echoes" to="horizontal_laser_2d" />
        -->
        <remap from="points2" to="velodyne_points" />
    </node>

  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.1" />

    <group ns="/pcl_filters">
        <!-- PCL Manager -->
        <node pkg="nodelet" type="nodelet" name="cropbox_filter_pcl_manager" args="manager" output="screen"/>

        <!-- A CropBox filter to avoid self-detection -->
        <node pkg="nodelet" type="nodelet" name="self_removal" args="load pcl/CropBox cropbox_filter_pcl_manager" output="screen">
            <remap from="~input" to="/velodyne_points" />
            <remap from="~output" to="/filtered_cloud" />
            <rosparam>
                input_frame: base_link
                output_frame: base_link
                # true: no points in the box, false: no points outside the box
                negative: false
                min_x: 0.5
                max_x: 3
                min_y: -1
                max_y: 1
                min_z: 0.05
                max_z: 2
            </rosparam>
        </node>
    </group>

<!-- Move_Base -->
<!-- Arguments -->
	<arg name="no_static_map" default="true"/>

    	<arg name="base_global_planner" default="navfn/NavfnROS"/>
    	<arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
    	<!-- <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> -->

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

        <param name="base_global_planner" value="$(arg base_global_planner)"/>
        <param name="base_local_planner" value="$(arg base_local_planner)"/>    
        <rosparam file="$(find landshark)/Config/planner.yaml" command="load"/>

        <!-- observation sources located in costmap_common.yaml -->
        <rosparam file="$(find landshark)/Config/costmap_common.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find landshark)/Config/costmap_common.yaml" command="load" ns="local_costmap" />

        <!-- local costmap, needs size -->
        <rosparam file="$(find landshark)/Config/costmap_local.yaml" command="load" ns="local_costmap" />
        <param name="local_costmap/width" value="10.0"/>
        <param name="local_costmap/height" value="10.0"/>

        <!-- static global costmap, static map provides size -->
        <rosparam file="$(find landshark)/Config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
        
        <!-- global costmap with laser, for odom_navigation_demo -->
        <rosparam file="$(find landshark)/Config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
        <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
        <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>
    </node>



</launch>
